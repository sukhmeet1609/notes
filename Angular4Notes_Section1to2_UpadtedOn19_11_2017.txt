#####################################
#      Udemy Angular JS course      #
#####################################

=====================================================================================================================================================================================================================================================================
Section 1: Lecture 2


1. What is Angular?-------Angular is a JavaScript Framework  which allows you to create reactive Single-Page-Applications[SPAs]
2. Here our page never changes, all the changes are done by a bunch of JavaScript Code (We got from the server) and we have only a single HTML page wich remains there.
3. Every Change we see is rendered in the browser (It gives the user a very reactive user experience).
4. JavaScript is very faster for having to reach out to the server for every page change, for every new piece of data you want to display.
5. There for this aproach allows you to create the web applications which look like mobile applications.
6. Very fast everything happens instently, and if you do need some data from the server - load it in the background so the user never leaves this reactive experience web application to use.
7. So, every single click changes this one HTML page we have (JavaScript changes the DOM/changes what ever is displayed/changes HTML code during the runtime).

======================================================================================================================================================================================================================================================================
Section 1: Lecture 3 (Angular 1 VS Angular 2 VS Angular 4)


1. Angular allows you to create very reactive single page web applications to update the page.
2. Angular 1 - was very popular JS Framework, released a couple of years back; Angular 2 -  A complete re-write of Anglar 1 and the future of Angular; Angular 4: Simply an update to angular 2 (Angular 3 was skipped due to version number conflicts).

=======================================================================================================================================================================================================================================================================
Section 1: Lecture 4 (CLI Deep Drive & Troubleshooting)

1. Depending on the CLI version you're using, you might also need to add the FormsModule  to the imports[] array
	in your app.module.ts  file (add it if you don't see it there).You might not fully understand what that all means but we're going to cover that in this course, no worries.
2. If you don't have FormsModule  in imports[]  in AppModule , please do add it and also add an import at the top of that file: import { FormsModule } from '@angular/forms'; 
4. If you want to dive deeper into the CLI and learn more about its usage, have a look at its official documentation: https://github.com/angular/angular-cli/wiki
5. You encountered issues during the installation of the CLI or setup of a new Angular project?,a lot of problems are solved by making sure you're using the latest version of NodeJS, npm and the CLI itself.
6.Updating NodeJS:
		a. Go to nodejs.org and download the latest version - uninstall (all) installed versions on your machine first.
		b. Updating npm: Run ----- [sudo] npm install -g npm  (sudo  is only required on Mac/ Linux)
		c. Updating the CLI
						Run ------ [sudo] npm uninstall -g angular-cli @angular/cli 
						npm cache clean
						[sudo] npm install -g @angular/cli 
7. Here are some common issues & solutions:
						a. Creation of a new project takes forever (longer than 3 minutes): 
						That happens on Windows from time to time => Try running the command line as administrator.
						b. You get an EADDR error (Address already in use):
						You might already have another ng serve process running - make sure to quit that or use ng serve --port ANOTHERPORT  to serve your project on a new port
						c. My changes are not reflected in the browser (App is not compiling):
						Check if the window running ng serve  displays an error. If that's not the case, make sure you're using the latest CLI version and try restarting your CLI

========================================================================================================================================================================================================================================================================================
Section 1: Lecture 5 (Project Set up and first app/Importance of CLI) - CLI is the project management tool

1. Go to https://cli.angular.io
2. For entire cource we will use angular CLI commandline interface , this is simply a tool set for creating, building and managing your angular applications simply.
3. It quickly creates new projects and then we have commands (Provided by CLI) to build that project in production and so on (Angular is very futuristic and therefore it uses future like typescript, a superset of JavaScript which is to be compiled before it runs in the browser). 
4. The CLI also is a great tool for  big and very big Angular Projects! It allows you to focus on Angular code instesd of workflow tasks!
5. It has some extra steps during development and doing that manually can really be a pain 
6. We need nodeJS to manage the dependencies and the packages (Like the angular framework we have) we use. It also spins up a little development sever which also hosts our app on ou local machine, making it easy for us to test it
7. Few commands of CLI used are:
				a. npm install -g @angular/cli
				b. ng new my-dream-app
				c. cd my-dream-app
				d. ng serve
8. Creating a new angular project using CLI
				a. Command  -  ng new my-first-app
9. For navigating into that folder - cd my-first-app
10. The project can be run by using the command - ng serve (What this will do is, it will build all our source code as angular users typescript, which needs to be compiled to the JavaScript),
    then it will spin up a little development server which will run at http://localhost:4200 , we can change the default port by using the command -  ng serve --port YOURPORT.
11. Why do we need a server and not double click our index.html file, well, due to the nature how angular works - it also wants a lot of resources dynamically once it runs and we will only
	simulate how it will really look like on the real server if we use the HTTP protocol, which we don't use when double clicking on a file.

	
==========================================================================================================================================================================================================================================================================================
Section 1: Lecture 6 (Editing the first app)

1. The project we created in the last lecture in the "webstorm" (The IDE that we'll use for this course), now "WebStorm" is one option and evergrade options as editors to work in this course
2. "Microsoft Visual Studio Code (MVS)" is a free IDE with great Angular support!, "Sublime Text" and "Atom" are popular text editors!
3. .ts - typescript
4. Typescrit file is the business logic and HTML file is what you see

================================================================================================================================================================
Section 1: Lecture 

1. Course Structure 
		a. Getting Started
		b. The Basics
		c. Components and Databinding
		d. Directives
		e. Services and Dependency Injection
		f. Routing
		g. Observables
		h. Forms
		i. pipes
		j. HTTP
		k. Authentication
		l. Optimizations and NgModules
		m. Deployment
		n. Animations and testing
		
==============================================================================================================================================================		
==============================================================================================================================================================
===============================================================================================================================================================
SECTION 2:


SECTION 2: Lecture 1 & 2
1. From main.ts file the angular app starts its execution i.e. invokes app.module.ts // where .ts is the transcript file;
	the index.html file is served by the server - index.html file contains the <app-root> tab inside the body which gets replaced by the app (inside the src folder);
	this app part/folder which is also the root componenet of the application is provided by the angular CLLI
			a. In the app.component.ts file we have the selector which is set to 'app-root' in our application is used to place values in the index.html file
			b. the data of the componenet is the data in the app.component.html file content; like this there can be many more components.
			c. Now the question is that how is the data injected in the index.html file - and the answer is there are many script files which are injected in the end of the index.htm by angular CLLI.
			d. platformBrowserDynamic().bootstrapModule(AppModule); is inside main.ts file - this is where the bootstrap starts, 
				we are passing the AppModule inside the BootstrapModule - AppModule comes from app.module.ts inside the app
			e. in app.module.ts file containes @NgModule inside it.
			f. the app.module.ts file contains the bootstrap array which contains the details of all the componenets which are known to the angular app.
			g. main.ts calls the app.module.ts which intern contains the bootstrap array which contains the AppComponent; now the app compnent contains the following files as a compnent in it:
					1) app.componenet.css
					2) app.componenet.html
					3) app.componenet.spec.ts
					4) app.componenet.ts

=======================================================================================================================================================================
SECTION 2: Lecture 3

2. Components 
			a. Componenets are the key feature in the angular application 
			b. You built your whole application by composing it from a couple of components which you create on your own; 
				there is one root componenet in which we will nest or add our componenets.
			c. There is the root component where we nest or add our own componenets // https://angular-driven.com; in the whole page we will add different compnenets in all the places of the screen.
			d. We also have our main area and the side bar as the component; there may be the header in your application; maybe that header contain items that have their own component.
			e. that is the main idea behind the angular i.e. built componenets; each component has its own templates i.e. its own HTML code, maybe its own styling and more importantly also its bussiness logic
			f. It allows to split up your complex application and complex web page into reusable parts
				All the components that we have created can be reused any where i.e. they are reusable.
				this alows you to replicate that bussiness logic and styling again and again at any place in the app you want.
			g. You may use the component more than once, this allows you to replicate the bussiness logic more than once, 
				replicate the styling and finally controlled piece in your application, without having to crunch everything into one single script file
			h. Only root componenet will be added to the index.html, rest all the componenets will not be added into index.html file
			i. Each componenet has its own HTML code, its own template, maybe its own styling and more importetly its own bussiness logic;
			   and this the main benefit - it allow you to split up and devide your complext application into simpler components.
			j. Componenet just acts like a finally completed piece in your application, without having to crunch everything into one single script file.

=======================================================================================================================================================================
SECTION 2: Lecture 4
			
3. Lets add one component in our application. Lets say we want you to output some information about the server, 
	we are building a backend for our server management application and we want to output some server infromation.
4. Make new folder named server to hold the server data; in your angular CLLI project all your app related data will go inside your app folder.
	a. while adding anything in the new folders/components we have created always follow the naming conventions
	b. suppose we have created a folders/componenet as server; now all the files inside this folder will be named as server.componenet.css, server.component.html etc.
	c. by using the filenames like this it is very easy to see inside what the file contains and there is unifomity in the application.
	d. main file in the components is .ts file ex. foe our above server componenet is server.componenet.ts.
	e. component is simply a typescript class; so that angular is able to instantiate it to create the objects based on the blueprints we setup here.
	f. we need to add export class in .ts file to make it available for the other classes:
		export class ServerComponent{} // again here we have the name of the componnet first i.e. server (here for this compnenet)		
5. Each component needs to have its own component, its not compulsory but generally it makes more sense and makes application more readable
6. A componenet is just a simple typscript class so that angular is able to instantiate it, to create objects based on the pool prints we setup here
7. Decorators
		Decorators are the typescript features which allows you to enhance your class, its not restricted to classes, you can also enhance elements. // its the component decorator
				example:
				import {Component} from '@angular/core';
				@Component({
					selector:'app-server',                                 //selector is used to fetch this component in the HTML code later,this selector should always be unique
					templateUrl:'./server.component.html',                 //this is always a relative path in respect to the folder structure of the project
					styles: [`
						.online{
								color: white;
						}
					`]

				}) //Component Decorator
		
		
8. Components are always added by adding a @ sign in the front of it.
9. Typscript don't know the componenet decorator from the start, se we have to import it, so we also need to mention the package from where we are importing the component
10. The '@angular/core' package gives us access to some of the core functionalities of the angular, so after importing the package the component becomes known to the typescript.
11. So, when it parses this file and converts it to javascript it is able to understand the component.
12. Now, we need to pass the JavaScript object to this component to configure it.
13. Without any configuration its still not of any value to angular
14. Here in the component we can satup some importat information, which will be stored as metadata for this class in the background then which will tell angular what to do with this class
15. a. Selector:
		One importent piece is the selector, selector helps you to be able to use this template in your other components HTML files. the selector should be a string.
	b. here we will create another external file templateUrl: ""  - here we will give the relative path for the file i.e. templateUrl:'./server.component.html',
	//this is an HTML file which will hold the HTML code for me.

Note: a. Only one component will be added to the index.html i.e. root compnenet and the other componenets will be added to app.component.html
	  b. A component is a typescript class
		
====================================================================================================================================================================
Section 2: Lecture 16
		
16. Angular uses components to build we pages, modules to basically bundle up different pieces for example components of your app into packages.
17. Module:
		a. Bundles of functionalities of our app.  //such as componenets, module is a .ts file i.e. typescript file
		b. The new component needs to be registered in the module so that angular knows that the new component has been registered.
		c. If you don't tell angular that a certain component exist in you app, angular don't know it, just creating a file is not enough.
18. Module bundles components of your app into pakages, for the majority of this course we will use the App Module.
		a. NgModule is decorator which is also imported from @angular/core
		b. Each new component created needs to be registered in the module i.e. app.module.ts file which is typescript file
		c. Components will be added in the declaration property of the @NgModule decorator
		d. We created here the server component in our app so we need to import it i.e. import {ServerComponent} from './server/server.component';
		e. we can divide our app into different modules, but here we are using only one modules and will call some of the built in modules of the Angular.

19. Generally, for the bigger apps only you need to think of splitting of your app into multiple modules.

================================================================================================================================================================

Section 2: Lecture 17 // Using Custom Modules

20. Module is bundle of functionalities of our app and it basically gives angular the information that which features my app has and use.
			a. Once our componenet is registered, lets use it.  //i.e. registered in component.ts
			b. Now, the selector that we created would act as the tag in the HTML.
			c. Now, as we know the index.html is the main file which is called, in this file we call app.component.html, now in this file i.e. app.componenet.html we 
			will call our selector.
			
=================================================================================================================================================================			
Section 2: Lecture 18 //Creating Componenets with CLI and Nesting componenets
 Note: 1) Open new CMD window and  let - ng serve running other CMD instance.
	   2) Here we can use a new CLI command to create a new server component here.
	         a.  ng generate component servers  //command
			 b. ng g c servers //this command is a short-cut command for the above command; here you will find the same same files inside the folder which we has for app component
			 
1. We can use any component as often as we want by using its component selector as we want; here we are nesting app-server component inside app-servers component
2. When you create any new component, you also need to update the app module and add that component.
3. Now inside app component selector we update the component selector from app-server to app servers.
=================================================================================================================================================================
Section 2: Lecture 19 //working with component template

1. Instead of using the external template file you can also use inline code; which means that you can write HTML code inside the typescript file.

/*template: `<app-server></app-server>
            <app-server></app-server>`,*/   //this way we can write the HTML code in typescript
			
2. Instead of writing inline code one should write code in the external file, which makes it more readable and easy to handle
3. To write inline code you need use template.
4. Lated in  
==============================================================================================================================================================
Section 2: Lecture 20//Working with component styles

1. we know that templates are important we can either write them inline in typescript file or we can call an external file.
2. what about styles, we also have this style or else property we have these CSS files.
3. The text in in the app.component.html is not very prety, now as we are using bootstrap, we can use some bootstrap classes to enhance this.
4. So, we could add a <div> with a container class around it and then add a row i.e. in another <div>, and then we can add another <div> to add a column here.

<div class="container">
    <div class="row">
      <div class="col-xs-12">
            <h3>I am in the AppComponent!!!</h3>
            <hr>
            <!-- <div app-servers></div>-->
            <app-servers></app-servers>
            <!--<div class="app-servers"></div>-->
      </div>
    </div>
</div>

5. Here we just added a normal styling and nothing CSS specific
6. Now we can also use some tools given to us by angular.
7. Now, suppose we want to give some blue color, we can do it by adding some code in the app.component.css, which defines the styling for this component.
8. And, now we can write some normal CSS code.
9. We can also write styling code inline in the typescript file of that component. By using the -  styleUrls: ['./servers.component.css']; we can refer to as many externl stylesheets we want.
10. We can also refer to another property which is also an array of strings, i.e. styles: [``] // here the back ticks are used, to be able to write a multiline expression.
11. Inline style has priority over the external file reference styling and also the external component styling.
12. We can't combine style URLs and styles. You can only have one tamplate but you can have multiple style files.
13. And you can choose between inline and external file.
14. This is how we can work with templates and styles.

====================================================================================================================================================================
 Section 2: Lecture 21 // Fully understanding the component Selector.
 
 
1. The last property is the component selector in Component, this should be unique - so that you do not override an existing element or maybe a component made 
	available by a number of third party package.
2. The selector just works as a CSS selector, the selector is not limited to tags i.e. name of tags. We can also use attribute in the selector; we can also use array of
	attributes in the selector.

	<div class="container">
    <div class="row">
      <div class="col-xs-12">
            <h3>I am in the AppComponent!!!</h3>
            <hr>
            <!-- <div app-servers></div>-->  // here app-servers is acting as attribute instead of tag in the selector; so here we can just ass this as an attribute in the array of selector.
            <app-servers></app-servers>
            <!--<div class="app-servers"></div>--> // 3rd way select by class
      </div>
    </div>
</div>

3. 3rd way is to select by class, this way we can also style it.

Note: selecting by ID wont work, angular doesn't support it and all those pseudo selectors like hover and all also doesn't work. We use selectors in angular; for componenets
		we use directives which we will use in future.
		
=================================================================================================================================================================
Section 2: Lecture 22 // What is databinding(databinding == communication)

1. Till now in our basic application we have added a couple of components, and understood a lot of key aspects of basic angular and how it starts and how to use components.
2. The base building block of any angular application is component but thus far we only output static content.
3. Lets output some data which is kind of dynamic and not hard coded atleast.
4. What is databinding?
	Ans.  a. you could basically translate data binding with communication, communication between your types of code.
									
											                               communication
			                                 typescript(bussiness logic) <<==================>> 	Template(HTML)
											 
5. the communication is between the bussiness logic and the tamplates (what the user sees), because you might have some result in typescript code you fetched something 
	from server or finished some calculation.
6. The only thing that the user sees is the template, so we need some kind of communication between both pieces to be able to really we do something in, that is where databinding
  comes into the picture because it is responsible for communication. we got different ways of communication 
   a. we want to output data from out typescript code in the HTML code in the templates, we can use string interpolation for this, or property binding
   
									                 ---------->>>>> output to HTML from typescript               
									                         1. String Interpolation({{ data }})
															 2. property binding( [property]="data" )									
						typescript(bussiness logic) <<=========================================================>> 	Template(HTML)
						
7. Now, also we need data from other way round. where the user clicks some button and the data needs to brought to typescript from the HTML template.



                        typescript(bussiness logic) <<=========================================================>> 	Template(HTML)
						                                 1. Event Binding( (event)="expression")	
				             input to typescript from HTML template i.e. react to the (User) events<<<<<<---------------------------
							 

8. now, we also have the combintion of the both : two-way-databinding  --  ([( ngModel )]="data").
	a. In two way databinding we are able  to react events and output something at the same time.
9. Now, we will have the clear understanding of all 4 forms in the next lecture.

==================================================================================================================================================================

Section 2: Lecture 23 // String Interpolation

1. Lets output the details of the specific server from the server component.
2. So maybe here in the template fule we want to output server with ID and then some dynamic IDs.
3. So there would be 2 dynamic feilds here.


//below code is in .ts file of that component
export class ServerComponent{
    serverId: number = 10;                                        //these are two properties that we will output in the HTML template
    serverStatus: string = 'offline';                              //here you can see that first the name of the property is there and then the type of the property is there and finally the value

    constructor(){
        this.serverStatus = Math.random()> 0.5 ? 'online':'offline';
    }

    getServerStatus(){
        return this.serverStatus;                                    //this method returns string in the end so it can also be used in the string interpolation
    }

    getColor(){
        return this.serverStatus === 'online' ? 'green' : 'red';
    }
	
}



//below code is in html file of that component

<p [ngStyle]="{backgroundColor: getColor()}" [ngClass]="{online: serverStatus==='online'}"> 
    {{ 'server' }} with ID {{ serverId }} is {{ getServerStatus() }}</p>  /// the code with double curly braces is string interplation

	
4. In string interplation whatever is inside it i.e. property or method needs to return a string in the end.
5. The restriction is you can't write multi-line expression here and you can't write block expression here.
6. you can also simply hardcode a string in there.
7. You can't add a if or a for in the string interpolation
8. You can use a ternery expression here.
9. You need to add anything string in the string interpolation and also something which can be converted to string in easily.

==================================================================================================================================================================
Section 2: Lecture 24 // Property Binding

1. In the last lecture we learnt about the string interpolation which is the great tool for outputting in a template.
2. Now I want to have a look at  property binding.

<button class="btn  btn-primary" 
        [disabled]="!allowNewServer"                           //property binding
        (click)="onCreateServer()">Add Server</button>

==================================================================================================================================================================
Section 2: Lecture 25 // Property binding vs String Interpolation

1. If you want to directly output something, use String Interpolation else if you want to change some property use Property Binding

=================================================================================================================================================================
Section 2: Lecture 26 //Event Binding

1. create a new method in the class inside our typescript file and call it inside the button tag to trigger some event when the button is clicked.

<button class="btn  btn-primary" 
        [disabled]="!allowNewServer" 
        (click)="onCreateServer()">Add Server</button> // on click event here a new server will be created.
		

=================================================================================================================================================================
Section 2: Lecture 27 //Bindable Properties and Events

1. How do you know to which Properties or Events of HTML Elements you may bind? You can basically bind to all Properties and Events - a good idea is to console.log()  
	the element you're interested in to see which properties and events it offers.
2. Important: For events, you don't bind to onclick but only to click (=> (click)).
3. The MDN (Mozilla Developer Network) offers nice lists of all properties and events of the element you're interested in. 
	Googling for YOUR_ELEMENT properties  or YOUR_ELEMENT events  should yield nice results
	
=================================================================================================================================================================
Section 2: Lecture 28 //Passing and using data with event binding

1. Now, we will understand 2 way data binding.

//HTML template code
<!--<input type="text" 
       class="form-control" 
       (input)="onUpdateServerName($event)">--> //you can use $event as the input perameter to fetch the value passed on that event.


<button class="btn  btn-primary" 
        [disabled]="!allowNewServer" 
        (click)="onCreateServer()">Add Server</button>
//typescript code

  onUpdateServerName(event: Event){
      this.serverName=(<HTMLInputElement>event.target).value; //this way we can tell that the input of this type will be HTML input element
  }

=================================================================================================================================================================
Section 2: Lecture 29 //Two way data binding

1. In the last lectures we learnt a lot about event binding and property binding, now, lets conbine both to two way binding.

//servers.component.html
<input type="text" 
       class="form-control" 
       [(ngModel)]="serverName">  <!--Two way data binding -->//ngModel is a directive


<button class="btn  btn-primary" 
        [disabled]="!allowNewServer" 
        (click)="onCreateServer()">Add Server</button>


=================================================================================================================================================================
Section 2: Lecture 30 //Important: FormsModule is Required for Two-Way-Binding!


1. Important: For Two-Way-Binding to work, you need to enable the ngModel  directive. 
    This is done by adding the FormsModule  to the imports[]  array in the AppModule.
2. You then also need to add the import from @angular/forms  in the app.module.ts file:
3. import { FormsModule } from '@angular/forms'; 

==================================================================================================================================================================
Section 2: lecture 31 //Combining all forms of data binding

1.  


=================================================================================================================================================================
Section 2: Lecture 32 //Understanding Directives

1. What are directives?
	Ans: a. Directives are instructions in DOM!
		 b. We actully used directives without knowing it.
		 c. Components are a kind of instructions in the DOM, once you place a selector off a component somewhere in our templates - at this point we are instructing
			angular to add the content of our component template and the bussiness logic in our typescript code in this place where we use the selector.
		 d. Our instruction to angular was, please add our component in this place and indeed components are directives but directives with a template. 
		 e. There are also directives without a template.
2. We learnt about component - the basic building blocks of any angular app, how we can start the app, how we can communicate within out teplates in our components
	so that we can output data or react to events. Now there is a key building block you probabaly use to build any angular app  - the directives.
3. we typically add directives with attribute selector, but technically the selector of a directive can be configured just like the selector of a component.
4. so you could also use css classes or the elements style, but again typically use the attribute style.

<p appTurnGreen>Receives a green background!!</P>
5. and on this paragragraph this directive might simply colored the test green you could say so angular would find this instruction here we would  have defined.
	our directive with the directive decorator to inform angular that this class holds a directive and there we might have logic to turn it green.
	
	@Directive({
		selector: '[appTurnGreen]'
	})
	export class TurnGreenDirective{
	}
6. Now, we will learn how to create directives in the section focused on directives in this cource, but there are couple of built in directives which are really usefull.

==================================================================================================================================================================
Section 2: Lecture 33 //Using ngIf to output data conditionally

1. besides components which are directives - thats important but we haven't used any other directives.
2. For condetionally showing a message, for this, we can use a directive shipping with angular ngIf directive.
3. ngIf works like an if statement. 

<p *ngIf="serverCreated">Server was created, server name is {{ serverName }}</p> //ngIf is added by adding a *, i.e. *ngIf, this important - the * is required because ngIf is able
//structural directive; which means it changes the structure of our DOM, i.e. it either adds this element or it doesn't add it. So thats some extra information for angular.

4. The directive itself is ngIf but the star is required, because without it, it will not work correctly

*ngIf="serverCreated"  //for ngIf the expression inside the quotes is either true or false.

=================================================================================================================================================================
Section 2: Lecture 34 //Enhancing ngIf with an else condetion.

1. In the last lecture we have looked at the basic ngIf syntax and that's the syntax you are going to use most of the time and there is no alternative to it though.
2. but, sometimes you don't only have the if condetion but also the else condetion.

<p *ngIf="serverCreated; else noServer">Server was created, server name is {{ serverName }}</p> //ng if enhanced with the marker noServer
<ng-template #noServer>    //local reference starts with #, we will explain it in detail later
        <p>No server was created!</p>
</ng-template>

==================================================================================================================================================================
Section 2: Lecture 35 //Styling Elements Dynamically with ngStyle

1. In the last lecture we saw *ngIf - which is a super usefull directive and *ngIf was a structural directive.
2. The other type of directives are attribute directives, unlike structural directives, attribute directives don't add or remove elements, they only change the element
	they were placed on.
3. The attribute directives just look like normal HTML attributes i.e. without a * basically.
4. the constructor() method in a class of typescript is called once the component is created. 


    constructor(){
        this.serverStatus = Math.random()> 0.5 ? 'online':'offline';
    }

5. to change the color dynamically we can use another directive:

<p [ngStyle]="{backgroundColor: getColor()}" [ngClass]="{online: serverStatus==='online'}">  //here we have used property binding on ngStyle
    {{ 'server' }} with ID {{ serverId }} is {{ getServerStatus() }}</p>
	
6. We used property binding on the ngStyle directive to give it some configuration to use it. 
7. Note: its very important to understand here that the square barckets on the directive are not the part of the directive.
8. The directive name is just ngStyle, the square brackets indicate that we want to bind some property on this directive and this property name happens to be ngStyle
   We will se this in this in the practice session on our own directives in the practice session later.
9. But super important to undrstand is that property binding is not same as a directive, we are binding a property of the directive.
10. This ngStyle property expects to get a JavaScript object and here we define key value pairs of this style name as to key and the value of the style as value.
11.  well you know for example we could bind background color and if you want to use this notation with the dash ("-"), you have to wrap it in single quotation marks('')

getColor(){
        return this.serverStatus === 'online' ? 'green' : 'red';
    }
	
12. so that's ngStyle an attribute directive and added like an attribute.

==================================================================================================================================================================
Section 2: Lecture 36 //Applying CSS classes Dynamically with ngClass

1. We saw examples for ngStyle and ngIf, now, something related to ngStyle is ngClass.
2. Now, we learnt that ngClass allows us to dynamically assign a style, now, we will also add ngclass here


<p [ngStyle]="{backgroundColor: getColor()}" [ngClass]="{online: serverStatus==='online'}">  //ngClass only works as expected when we are using property binding, so here we have wrapped it in square brackets.
    {{ 'server' }} with ID {{ serverId }} is {{ getServerStatus() }}</p>
	
3. ngClass allows us to dynamically add or remove the CSS classes.

@Component({
    selector:'app-server',
    templateUrl:'./server.component.html',
    styles: [`
    .online{                         //here we added a class online and to write the code in multiple lines we use back ticks
        color: white;
    }
    `]

}) //Component Decorator 

4. And in the ngClass directives we need to pass a javascript object and thats the case for this property this ofcourse each property you bind to may take a 
   value like disabled which took true or false.
5. ngClass object works like this, we also have key value pairs. The key are the CSS class names and the values are the condetions determining wether this class
   should be attached or not, so here we have the online class -  you could also wrapp it in single quote marks.
6. If you have class name with a dash inside of it or something like this, and here , well, I want to attach only if the server is online, so only if the server status
   is online.
7. Here it is a string between single quotation marks, now, ofcourse you could also outsource this method you call this service status equal online check., but here I will
   write it inline.
8. So if this is online we should attach the CSS class online to this paragraph, otherwise it should not get attached.

==================================================================================================================================================================
Section 2: Lecture 37 //Outputing Lists with ngFor


1. With all these directives learnt lets's now have a look at the last built in directives and important one though.
2. In our servers compoenet here we write manually - add our apps server component twice, it would be nice to have an array of servers which adds dinemically.
3. So in the servers component we will add a new property - servers. And this is an array, and here we can have my test server and my test server to maybe.
4. When we create a new server, I actually want to access the array of the servers and push new server on it and this should ofcourse use the server name I setup
5. Now, with this I have an array of servers. It would be great if we can replicate the app server component as often as needed to have a server for each 
   element in the array.
6. *ngFor is also a structural directive, so it will have a star (*) on it.

<app-server *ngFor="let server of servers"></app-server> //servers here is the property that we defined inside the typescript file; here server is the dynamic server variable.

7. Now, loop through all the elements in this array and assign the individual element to the dynamic server variable.


==================================================================================================================================================================
==================================================================================================================================================================
==================================================================================================================================================================
Section 3: Lecture 39 //Project Introduction


1. We will build a recepie book and a shopping list app.
2. There would be two sections shopping list and recipe book and we would be able to manage our recipe and would also be able to manage our shopping list.
3. And even push the recepie directly to the shopping list.
4. Lets plan the application, before we start the application we need to plan.
5. So, in the next lecture we will plan what all features and compnents we need for this application.

=================================================================================================================================================================
Section 3: Lecture 40 // Planning the app

1. The first step in creating an angular application is to lay out the structure of this app and plan which component we would probabaly going to use/need.
2. Feature of this app, we will be going to have shopping list and recipe book.
3. the components which we would need for this:
	a. Root component i.e. the app component
	b. Now we have 2 sections i.e. shopping list and recipe book; so, we need header component so that we can nevigate between these 2 sections.
	c. The header will contain its own bussiness logic, in the end it will also handle the routing action.
	d. The root component should only be responsible for holding our overall app.
	e. Now lets dive deeper into the features which we are going to make.
4. Feature 1 - Shopping list; it will contain the following components:
	a. shopping list
	b. Shopping list edit. // the edit component will be nested inside the list component.
	c. Model - Ingredient  //by model we mean which data?
5. Feature 2 - Recipe book
	a. recipe Lists
	b. recipe Item
	c. Recepie Detail // once we select a recipe we would be able to see the information of the recipe here i.e. the details of the recipe
	d. Here we might later also have an extra "recipesComponent" holding  recipe List and detail next to each other.
	e. Then we would need a new component to edit or add new recipes.
	f. Model - Recipe //Besides ingredients in Shopping cart we also need a model recipe in Recipe book.
6. Each of this component will contain a segnificant amount of bussiness logic.
7. We have each compnent focused on one single topic.
8. In the first step we will just create these compnents and fill them with some dummy data.

===================================================================================================================================================================
Section 3: Lecture 41 // setting up the application

1. You can just recreate the project by just running ng new [project name]
2. The first thing I want to do is to add bootstrap CSS framework.
3. now, to add bootstrap just run the following command inside this project folder in commandline:
		npm install --save bootstrap //we have typed this in the terminal; this will automatically install the latest version of bootstrap in this project.

4. Now we also need to inform CLI that the bootstrap should be included in the final bundle it creates for us., because of the CLI bundles , all our scripts and style files
	by default it would not inlude bootstrap.
5. So, to inform the angular we need to go to the .angular-cli.json file, and here in the styles array we can add only of the global style stylesheets, which
	would be available to our whole project.
6. Now, it already has styles.css file for the whole application/project ; here we will simply add the path to our bootstrap styles.
7. Now, we can have look that where it is stored, in the node modules folder which manages all our dependencies.
8. If we have a look at the bootstrap folder, the dist folder sounds right for distribution -  there we have the CSS folder and here is the CSS file
	that probably we need.
9. Now we can quickly import that file in .angular-cli.json file in styles; here we need to go up one level first i.e.  "../node_modules/bootstrap/dist/css/bootstrap.css"
10. To be precise it would be better to target the minni file, which is the file also lying in that folder, so we have final path below
		"../node_modules/bootstrap/dist/css/bootstrap.min.css"
11. This will give us access to the mini file folder, which is smaller.
12. now we can run ng serve to build our project first time and serve it at localhost:4200


<div class="container">
    <div class="row">
      <div class="col-xs-12">
            <h3>I am in the AppComponent!!!</h3>
            <hr>
            <!-- <div app-servers></div>-->
            <app-servers></app-servers>
            <!--<div class="app-servers"></div>-->
      </div>
    </div>
</div>

13. Now our application is set up, now, lets start creating all the components that we require.

========================================================================================================================================================================
Section 3: Lecture 42 //Creating the components

1. While creating the components try to create a clever folder structure in your app folder, notevery component should have folder on the root level.
2. You should also nest them by feature maybe, try to make atleast one component by hand manually and not using the CLI.
3. We have got two main areas i.e. Recipe and Shopping list, and we get this header compnent.
4. Now, we will create this header component manually, we will create the headed folder in the app component.
5. then we will name it as header.component.ts for typescript file and in the similar way for other files.
6. Now, as we learnt that a component is just a typescript class and as of now that would not be recognized as a component by angular.
7. Instead here we have to add @component decorator and later we are going to use the auto import feature on our ID.
8. For now import the component manually,

		import { Component } from '@angular/core';
		
		export class HeaderComponent{
		
		}
		
9. Now with that we need to add the Java Script decorator to configure this component.
        
		@Component({
			selector: 'app-header',
			templateUrl: './header.component.html'
		})
		
10. Now, we will create the header.component.html file in the header folder.
    <h1>The Header</h1>
11. Now, in app.header.html add:

		<app-header></app-header>
		
12. if we get "loading..." in the brouser wehn we run the application, this means that there is some error; now open the Java Script console of your brouser 
	to see the error.
13. Here we got the error, that <app-header> is not a known component; now as you know we need to register all our components in the app.module.ts.
14. So, here we have not registered our new component in app.module.ts
15. Now, since we didn't use CLI to add this component, so its didn't get added automatically.
16. Now, we have to add manually our declarations array and that means we also have to add the import on the top 
		
		import { HeaderComponent } from './header/header.component';
		
        @NgModule({ 
			declarations: [
			AppComponent,
			HeaderComponent
			],
			imports:[
			],
			providers:[],
			bootstrap:[AppComponent]
		})
17. Now, lets move on to adding all the other components with the CLI.
18. now, we will use the below command to add a new component using CLI:

		ng g c recipes --spec false // here we have written the false to prevent the creation of the testing file
		
19. so with that we get a new folder in our app folder the recipes folder to hold our recipies component.
20. Now, this will be our overall recipe's feature component.
21. Now, if we want to create a new component inside some folder, we need to use below command:

		ng g c recipes/recipe-list --spec false //this will create recipe-list inside the recipes folder.
		
22. this is what I meant by the way of structuring the folders by feature now with the recipe list, here in recipes folder we need to add some more components:
		a. recipe-detail
23. Now, we will add recipe-item folder in recipe-list folder.

        ng g c recipes/recipe-list/recipe-item --spec false
		
24. This is the way of structuring the folders by feature
25. All the components that we created above will be automatically added to the app.module.ts file by CLI.

====================================================================================================================================================================
Section 3: Lecture 43 //Using the components

1. Now, lets start using the components that we created above.
2. We will start using them in the app.component.html file:


<app-header></app-header>
	<div class="container">
		<div class="row">
			<div class="col-md-12">
				<app-recipes></app-recipes>
				<app-shopping-list></app-shopping-list>
			</div>
		</div>
	</div>
	
3. Now we will also work on the individual components also:
		a. Now, in resipes.component.html we will create the following tags
		
		<div class="container">
		<div class="row">
			<div class="col-md-5">
				<app-recipe-list></app-recipe-list>
			</div>
			<div class="col-md-7">
				<app-recipe-detail></app-recipe-detail>
			</div>
		</div>
	</div>

4. Now, lets go inside the shopping-list component:

	<div class="row">
		<div class="col-xs-10">
		<app-shopping-edit></app-shopping-edit>
		<hr>
		<p>The List</p>
		</div>
	</div>
	

=================================================================================================================================================================
Section 3: Lecture 44 //Adding a navigation Bar

1. so we added all the components we created to our templates, now, lets finetune them and real content in them.
2. Now we will use some bootstrap classes:

 <nav class="navbar navbar-default"> //this is the bootstrap class which will give me default header.
	<div class="container-fluid">
		<div class="navbar-header">
		 <a href="#" class="navbhar-brand">Recipe Book</a>  //this will make it clickable header, we will have the value for href when we will do the routing; lets have # as of now
		</div>	
	</div>
 </nav>
 
3. Now, we will keep a container fluid div there to have may own container there and the first thing we want to have there is header, for that we get the navigation bar
	header class.
4. Now, lets work on actual links
	
	<nav class="navbar navbar-default"> 
	<div class="container-fluid">
		<div class="navbar-header">
		 <a href="#" class="navbar-brand">Recipe Book</a> 
		</div>	
		<div class="collapse navbar-collapse">
			<ul class="nav navbar-nav">
				<li><a href="#">Recipes</a></li>  
				<li><a href="#">Shopping List</a></li>	 		 
			</ul>
			<ul class="nav navbar-nav navbar-right" >
				<li class="dropdown">
					<a href="#" class="dropdown-toggle" role="button">Manage<span class="caret"></span></a>
					<ul dropdown-menu>
						<li><a href="#">Save Data</a></li>
						<li><a href="#">Fetch Data</a></li>
					</ul>
				</li>
			</ul>
		</div>
	</div>
 </nav>

==================================================================================================================================================================
section 3: Lecture 45 // Alternative Non-Collapsable Navigation Bar

1. The way we added it, the Navbar will collapse on smaller screens. 
	Since we didn't implement a Hamburger menu, that means that there's no way of accessing our links on smaller screens
2. You can either add such a menu on your own, our you replace collapse navbar-collapse  with just navbar-default

==================================================================================================================================================================
Section 3: Lecture 46 //Creating a "Recipe" Model

1. We added the header in last lecture now I want to work on my recipes, so we get recipe component which holds the recipe list
2. I will go into my recipe list component and we will learn more about ng or init later in the next module or the components module.
3. For now in the recipe-list.component.ts, i want to add an empty array in the class RecipeListComponent named recipies=[];
4. Here, lets go back too the slide from the begining.
5. Now, we will create a model - A model simply is a typescript file
    
	Q. What is a model?
	Ans. A model simply is a typescript file.
	
6. Now, inside the recipes folder, we will create a new model i.e. recipe.model.ts
7. Now, again you should be descriptive about what's inside the file and with that it would be prety clear what would be inside.
8. First of all we, need to add an export class Recipe


export class Recipe{
}

9. A model in the end should be a blueprint we create and a typescript class does this job. A class can be instantiated so we can create new objects based on the 
	setup we provide here in; so we can define how a recipe should look like in this class.
10. A recipe should have a name and add access or to be really clear about that this is publicly available.

export class Recipe{

	public name: string;         // here it would be a public property i.e. name of string type.
	public description: string; //In this case I also want to have a description in each recipe so, I'll add my description property which also will be a string
	public imagePath: string;   //Now, maybe we also want to store an image for each recipe so we should have the image path since we don't
	
	constructor(name: string, desc: string, imagePath: string){ //constructor simply is a built in function every class has
		this.name = name;
		this.description = desc;
		this.imagePath = imagePath;
	}
	
}

11. We will aslo have a constructor here so that we can instantiate it with a new keyword and pass the arguments.
12. Inside the body of this constructor we have to assign the arguments that we receive to the properties of our object now to the properties of our class.


================================================================================================================================================================= 
Section 3: Lecture 47 //Adding Content to the Recipes Components


1. We added our recipe model, now lets use it. Back in the recipe-list component I added my recipes array and now that we have created the model we can also 
	we can aslo find a type for this.
	
	export class RecipeListComponent implements OnInit{
	rescipes: Recipe[] =[];            // we add colon to inform typescript that now we will definethe type of this property, so the type here will be recipe i.e. that is our own model.
	}

2. Above we have not only added the Recipe model as a type but also we have added it as Recipe array type, the square[] bracket after it indicates that.
3. The only things that will get stored in this Recipe array is the couple of Recipe objects.
4. No such objects is also a possibilty too; but its certailnly not string or numbers.
5. Now to inform typescript, from where this type is coming from we need to add a import:

	import {Recipe} from '../recipe.model'; //inside the curly braces here is the class name, that what we have to specify between the curly braces;
	
	//here by using ../ we navigated up one folder and then there is a recipe model file 
	
6. Now, with this we can use this model and then we can manage our recipes here.
7. Now lets start with one dummy recipe, here I will use a new keyword to create a new object based on our class 

			export class RecipeListComponent implements OnInit{
	recipes: Recipe[] =[
		new Recipe('A Test Recipe','This is simply a test','https://cdn.pixabay.com/photo/2016/06/15/19/09/food-1459693_960_720.jpg' )  //first we gave a name, second we gave a description and third one is image path
	];           
	}
8. Now executing it like a method, we are actually calling the constructor.
9. So, here we need to pass the arguments we are expecting in this constructor that is name description and image path.
10. Now you may choose any name you want, we'll name it as a test recipe so that will be the title - the name of the recipe then description, here for the image path
	I am going to use the images from the web (so we are going to use a URL).
11. So in the third parameter of the paranthesis we put the image path as string.
12. Now, we whould be able to use it later, once we output this so that we are using our own model.
13. We're using it here in the recipe list compnent, ofcource you wont be able to see anything for now.
14. So, to see that we should actually do something in the template of the recipe this component here i am right now only outputting my recipe item and I want
	to loop through all these items and use them to display my recipes. For now what I will do is I will add a bootstrap row first of all.
15. Go inside the recipe-list.component.html and add the following things:		
		
		<div class="row">
			<div class="col-xs-12">   //this is the xs class 12, it will spent over the full width
				<button class="btn btn-success">New Recipe</button>  //here we will later add a button for the functionality to create a new recipe
			</div>
			<hr>
			<div class="col-xs-12">   //adding another row below which will have my list of recipes
				<a href="#" class="list-group-item clearfix">           //the single recipe item should be clickable, also add clearfix otherwise it will probably look wrong
					<div class="pull-left">                             //since i want to have it in the left of the list item 
						<h4 class="list-group-item-heading">Recipe Name</h4>       //recipe name; these are all the bootstrap classes that we are using here, we will soon replace it with the dyamic content
						<p class="list-group-item-text">Description of the Recipe</p>
					</div> 
					<span src="" alt="" class="img-responsive" style="max-height: 50px;"></span>  //img-responsive will just resize the image accordingly
				</a>
					<app-recipe-item></app-recipe-item>  
			</div>
		</div>
16. We'll go to app recipe cource section after next cource section.
17. On more thing I want to set on the image though is, I want to add my own style.
18. I will simply add an inline style, I'll here set the maximum height of that item 250 pixels so that we cannot go above and bootstrap will handle the rest and resize the image approximately.
19. Now, with that the goal is to replicate this item again and will later put it into its own component, then we will fill the spces above (Places where we have added nothing i.e. src="" and alt="") with the dynamic data.

================================================================================================================================================================================================
Section 3: Lecture 48 //Outputting a List of Recipes with ngFor

1. So are ou successfull using our recipes array here and replicate below given part as often as needed and fill it with the data for the recipe:


<a href="#" class="list-group-item clearfix" *ngFor="let recipe of recipes">           //the single recipe item should be clickable, also add clearfix otherwise it will probably look wrong
					<div class="pull-left">                             //since i want to have it in the left of the list item 
						<h4 class="list-group-item-heading">{{ recipe.name }}</h4>       //recipe name; these are all the bootstrap classes that we are using here, we will soon replace it with the dyamic content
						<p class="list-group-item-text">{{ recipe.description }}</p>
					</div> 
					<span src="{{ recipe.imagePath }}" alt="{{ recipe.name }}" class="img-responsive" style="max-height: 50px;"></span>  //img-responsive will just resize the image accordingly
				</a>
				
2. Clearly we need *ngFor for this, which is the directive that allows us to repeate the code in our template and here  want to loop through all the recipes; so i will create a local variable recipe
3. resipes array simply holds an array of our recipes.
4. So a single item of our recipe will be our model type i.e. recipe.model.ts - which containes the name, description and the image part.
5. so, we can access the name out of recipe object in the string interpolation.
7. Inside the recipe.model.ts the constructor has 3 arguments which are not available to the outside world so you just need to use the variables given on the top.
8. in the src we can use below given 2 methods src="{{ recipe.imagePath }}" or [src]="recipe.imagePath";

===============================================================================================================================================================================================
Section 3: Lecture 49 //Displaying Recipe Details

1. In the last lecture we finished the recipe-list component, now lets finish the recipe detail component
2. Now, in recipe-detail.component.html create another bootstrap row:

		
		<div class="row">
			<div class="col-xs-12">   
				<img src="" alt="" class="img-responsive"/>
			</div>						
		</div>
		<div class="row">
			<div class="col-xs-12">   
				<h1>Recipe Name</h1>
			</div>						
		</div>
		<div class="row">
			<div class="col-xs-12">   
				<div class="btn-group">
				<button type="button" class="btn btn-primary dropdown-toggle">Manage Recipe<span class="caret"></span></button>
				</div>
				<ul class="dropdown-menu">
				<li><a href="#">Shopping List</a></li>
				<li><a href="#">Edit Recipe</a></li>
				<li><a href="#">Delete Recipe</a></li>
				</ul>
			</div>						
		</div>
		<div class="row">
			<div class="col-xs-12">   
				Description
			</div>						
		</div>
		<div class="row">
			<div class="col-xs-12">   
				Ingredients
			</div>						
		</div>
		
3. As of now, cross component communication is a huge issue rite now, but that is the part we will dig deeper into in the next course section and there after we will come back to this
	and enable all the communication.

===============================================================================================================================================================================================
Section 3: Lecture 50 //Working on the ShoppingListComponent

1. We finished for now all our recipe compnents and lets work on shopping list now.
2. In the shopping-list component- in the HTML template, I want to output unordered list:
		
			<div class="row">
			<div class="col-xs-10">   
				<app-shopping-edit></app-shopping-edit>
				<hr>
				<ul class="list-group">
					<a class="list-group-item" style="cursor: pointer">
						
					</a>
				</ul>
			</div>						
		</div>
		
3. Now, inside shopping-list.component.ts add the ingredients array:

        export class ShoppingListComponent implements onInit {
			ingredients = [];
			
			constructor(){}
			
			ngOninit(){
			}
		}
		
=============================================================================================================================================================================================
Section 3: Lecture 51 //Creating an "Ingredient" Model

1. We are going to use ingredients a lot in our application, making model for them makes sense; now, where do we store this ingredient model:
2. We stored the recipe model in the recipe folder because it belongs there feature wise but where does the ingredient model belong to. I beleive its belongs to a new folder the shared folder
	inside the app folder.
3. It contains the features or elements of our app which are shared across different features.
4. app > Shared > ingredients.model.ts 

		export class Ingredient {
				public name: string;
				public amount: number;
				
				
				constructor(name: string, amount: number){
					this.name = name;
					this.amount = amount;
				}
		}
		
		
5. Now, below is the optimized code for the above written code:

          export class Ingredient {
					constructor(public name: string, public amount: number){
					}
		}
6. With that we defined, how an ingredient should look like.

==================================================================================================================================================================================================
Section 3: Lecture 52 //Creating and Outputting the shopping List

1. We can now define type for our ingredients array, which would be Ingredient[]; below is the code for that;
		
			 export class ShoppingListComponent implements onInit {
			ingredients: Ingredient[] = [];
			
			constructor(){}
			
			ngOninit(){
			}
		}
		
2. Also please import the ingredient in the shopping-list.component.ts file:

		import { Ingredient } from '../shrared/ingredient.model';

3. With that we can add our first ingredient in the array as shown in the code below:

		
			 export class ShoppingListComponent implements onInit {
			ingredients: Ingredient[] = [
				new Ingredient('Apples', 5),
				new Ingredient('Tomatos', 10)  //this is our shopping list for now
			];
			
			constructor(){}
			
			ngOninit(){
			}
		}
		
4. Now inside the shopping-list.component.ts, we will put *ngFor to loop through all the ingredients:

			<div class="row">
			<div class="col-xs-10">   
				<app-shopping-edit></app-shopping-edit>
				<hr>
				<ul class="list-group">
					<a class="list-group-item" style="cursor: pointer"  *ngFor="let ingredient of ingredients">
						{{ ingredient.name }} ({{ ingredient.amount }})
					</a>
				</ul>
			</div>						
		</div>
		
=============================================================================================================================================================================================
Section 3: Lecture 53 //Adding a Shopping List Edit section

1. Now, lets add to the shopping-edit.component.html file

			<div class="row">
  <div class="col-xs-12"> 
  
    <form> 
      <div class="row">
        <div class="col-sm-5 form-group">
          <label for="name">Name</label>
          <input type="text" id="name" class="form-control">
        </div>
		
        <div class="col-sm-2 form-group">
          <label for="amount">Amount</label>
          <input type="number" id="amount" class="form-control">
        </div>						
      </div>
	  
      <div class="row">
        <div class="col-xs-12 form-group">
          <button class="btn btn-success" type="submit">Add</button>
          <button class="btn btn-danger" type="button">Delete Item</button>
          <button class="btn btn-primary" type="button">Clear</button>
        </div>										
      </div>
    </form>
	
  </div>						
</div>


=============================================================================================================================================================================================
Section 3: Lecture 54 //Wrap up & Next steps

1. Thats the first basic setup, ofcourse we can improve this app; I dont want to have the recipes and shopping-lists components on the same page, we'll fix this soon as of now 
	we have this temporarily, we will come up with the real solution later in the course.
2. And I also want my compnents to comunicate with each other.
3. The blocking thing right now is the component communication.

===============================================================================================================================================================================================
Start from lecture 55, section 4
revision section 4 lecture 55, continue from lecture 55   /// create from lecture 44 